One feature of Sass that's different than CSS is it uses variables. They are declared and set to store data, similar to JavaScript.
In JavaScript, variable are defined using the let and const keyword. In Sass, varialbes start with a $ followed by the variable name Here are a couple examples
$main-fonts: Arial, sans-serif
$headings-color: green;
and to use variables: 
h1{
    font-family: $main-fonts;
    color: $headings-color;
}
Sass allow nesting of CSS rules, which is a useful way of organizing a stylesheet. Normally each element is targeted on a different line to style it, like so:
nav {
    background-color: red;
}
nav ul {
    list-style: none;
}

nav ul li {
    display: inline-block;
}
For a large project, the css file will have many lines and rules. This is where nesting can help organize your code by placing child style rules within the respective parent
elements: 
nav {
    background-color: red;
    ul {
        list-style: none;
    }
    li {
        display: inline-block;
    }
}
In Sass, a mixin is a group of CSS declaration that can be reused thoughout the style sheet.
Newer CSS features take time before they are fully adopted and erady to use in all browsers. As features are added to browsers CSS rulses using them may nee vendor prefixes. Consider
box-shadow.
div {
  -webkit-box-shadow: 0px 0px 4px #fff;
  -moz-box-shadow: 0px 0px 4px #fff;
  -ms-box-shadow: 0px 0px 4px #fff;
  box-shadow: 0px 0px 4px #fff;
}
It's a lof of typing to re-write this rule for all the elements that have a box-shadow, or to change each value to test different effects Mixins are like functions for CSS. Here is 
how to write one: 
@mixin box-shadow($x, $y, $blur, $c){ 
  -webkit-box-shadow: $x $y $blur $c;
  -moz-box-shadow: $x $y $blur $c;
  -ms-box-shadow: $x $y $blur $c;
  box-shadow: $x $y $blur $c;
}
The definition starts with @mixin followed by a custom name. The parameters (the $x, $y, $blur, and $c in this example above) are optional. Now any time a box-shadow rule is needed,
only a single line calling the mixin replaces having to type all the vendor prefixes. A mixin is called with the @includ directive:
div {
    @include box-shadow(0px, 0px, 4px. #fff);
}

<style type='text/scss'>
  @mixin border-radius($radius) {
   -webkit-border-radius: $radius;
   -moz-border-radius: $radius;
   -ms-border-radius: $radius;
   border-radius: $radius;
  }


  #awesome {
    width: 150px;
    height: 150px;
    background-color: green;
  @include border-radius(15px);
  }
</style>

<div id="awesome"></div>

* Use @if and @else to Add Logic to Your stylesheet
The @if directive in Sass is useful to test for a specific case - it works just like the if satement in JavaScript.
@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}
And just like in JavaScript, the @else if and @else directives test for more conditions 

@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}


<style type='text/scss'>
@mixin border-stroke($val) {
  @if $val == light {
    border: 1px solid black;
  }
  @else if $val == medium {
      border: 3px solid black;
  }
  @else if $val == heavy {
    border: 6px solid black;
  }
  @else {
    border: none;
  }
}


  #box {
    width: 150px;
    height: 150px;
    background-color: red;
    @include border-stroke(medium);
  }
</style>

<div id="box"></div>

The @for directive adds styles in a loop, very similar to a for loop in JavaScript.
@for is used in two ways: "start throug end" or "start to end". The main difference is that the "start to end" exludes the end number as part of the count and "start through end" 
inculdes the end number as part of the count Here's start throug en example
@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}
The #{$i} part is the syntax to combine a variable (i) with text to make a string When the Sass file is converted to CSS, it looks like this 
.col-1 {
  width: 8.33333%;
}

.col-2 {
  width: 16.66667%;
}

...

.col-12 {
  width: 100%;
}
This is a powerful way to create a grid layout. Now you have twelve options for column available as CSS classes.


<style type='text/scss'>

@for $j from 1 through 6 {
  .text-#{$j} {
    font-size: 15px * $j;
  }
}

</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>
Sass also offer the @each directive which loops over each item in a list or map. On each iteration, the vairable gets assigned to the current value from the list or map
@each $color in blue, red, green {
  .#{$color}-text {color: $color;}
}
A map has slightly different syntax, Here's and example
$colors: (color1: blue, color2: red, color3: green);

@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}
Note that the $key variable is needed to reference the keys in the map. Otherwise, the compiled CSS would have color1, color2...
in it. BOth of the above code examples are converted into the following CSS:
.blue-text {
  color: blue;
}

.red-text {
  color: red;
}

.green-text {
  color: green;
}

<style type='text/scss'>

@each $color in blue, black, red {
    .#{$color}-bg {background-color: $color;}
  }

  div {
    height: 200px;
    width: 200px;
  }
</style>

<div class="blue-bg"></div>
<div class="black-bg"></div>
<div class="red-bg"></div>

The @while directive is an option with similar functionality to the JavaScript while loop. it creates CSS rules until a condition is met The @for challenge gave an example to create
a simple grid system. This can also work with @while.

$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}

First, define a variable $x and set it to 1. Next, use the @while directive to create the grid system while $x is less than 13. After setting the CSS rule for width, $x is incremented
by 1 to avoid infinite loop.

<style type='text/scss'>
  $x: 1;
  @while $x < 6 {
    .text-#{$x} { font-size: 15px * $x};
    $x: $x + 1;
  }


</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>

PARTIALS
Partials in Sass are separate file that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it 
organized.
Names for partials start with the underscore (_) character, which tellls Sass it is a small segment of CSS and not to convert into a css file. Also, Sass files end with the.ccss file
extenxtion. To bring the code in the partial into another Sass file, use the @import directive.
For example, if all your mixins are save in a pratial named "_mixins.scss", and the are needed in the " main.scss" file, this is how to use them in the main file:
@import 'mixins'
Note that the underscore and file extenson are not needed in the import statement - Sass understands it is a partial. Ocne a partial is imported into a file, all variabled, 
mixins, and other code are available to use.

<!-- The main.scss file -->
  @import 'variables';

Sass Has feature calles extend that makes it easy to borrow the CSS rules from one element the build upon them in another. For example, the below block of CSS rules styles A
.panel class it has a background-color. height and border
.panel{
  background-color: red;
  height: 70px;
  border: 2px solid green;
}
Now you want another panel called .big-pane. It has the same base properties as .pane, but also needs a widht and font-size. It's possible to copy and paste the initial CSS rules from
.panel, but the code becomes repetitive as you add more types of pannels. The extend directive is a simple way to reuse the rules written for one element, then add more for another:
.big-panel{
  @extend .panel;
  width: 150px;
  font-size: 2em;
}
The .big-pannel will have the same properties as .panel in addition to the new styles.
<style type='text/scss'>
  h3{
    text-align: center;
  }
  .info{
    width: 200px;
    border: 1px solid black;
    margin: 0 auto;
  }
  .info-important {
    @extend .info;
    background-color: magenta;
  }



</style>
<h3>Posts</h3>
<div class="info-important">
  <p>This is an important post. It should extend the class ".info" and have its own CSS styles.</p>
</div>

<div class="info">
  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>
</div>
